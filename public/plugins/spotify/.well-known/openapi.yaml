openapi: '3.0.3'
info:
  description: |
    You can use Spotify's Web API to discover music and podcasts, manage your Spotify library, control audio playback, and much more.
  version: '1.0.0'
  title: 'Spotify Web API'
  termsOfService: 'https://developer.spotify.com/terms/'
  servers:
    - url: https://api.spotify.com/v1
paths:
  /albums/{id}:
    get:
      operationId: get-an-album
      tags:
        - Albums
      summary: Get Album
      description: Get Spotify catalog information for a single album.
      parameters:
        - $ref: '#/components/parameters/PathAlbumId'
        - $ref: '#/components/parameters/QueryMarket'

      security:
        - oauth_2_0: []
  /albums/{id}/tracks:
    get:
      operationId: get-an-albums-tracks
      tags:
        - Albums
        - Tracks
      summary: Get Album Tracks
      description: Get Spotify catalog information about an album’s tracks. Optional parameters can be used to limit the number of tracks returned.
      parameters:
        - $ref: '#/components/parameters/PathAlbumId'
        - $ref: '#/components/parameters/QueryMarket'
        - $ref: '#/components/parameters/QueryLimit'
        - $ref: '#/components/parameters/QueryOffset'
      security:
        - oauth_2_0: []
  /artists/{id}:
    get:
      tags:
        - Artists
      operationId: get-an-artist
      summary: Get Artist
      description: Get Spotify catalog information for a single artist identified by their unique Spotify ID.
      parameters:
        - $ref: '#/components/parameters/PathArtistId'

      security:
        - oauth_2_0: []

  /artists/{id}/albums:
    get:
      tags:
        - Artists
        - Albums
      operationId: get-an-artists-albums
      summary: Get Artist's Albums
      description: Get Spotify catalog information about an artist's albums.
      parameters:
        - $ref: '#/components/parameters/PathArtistId'
        - $ref: '#/components/parameters/QueryIncludeGroups'
        - $ref: '#/components/parameters/QueryMarket'
        - $ref: '#/components/parameters/QueryLimit'
        - $ref: '#/components/parameters/QueryOffset'

      security:
        - oauth_2_0: []
  /artists/{id}/top-tracks:
    get:
      tags:
        - Artists
        - Tracks
      operationId: get-an-artists-top-tracks
      summary: Get Artist's Top Tracks
      description: Get Spotify catalog information about an artist's top tracks by country.
      parameters:
        - $ref: '#/components/parameters/PathArtistId'
        - $ref: '#/components/parameters/QueryMarket'

      security:
        - oauth_2_0: []

  /tracks/{id}:
    get:
      tags:
        - Tracks
      operationId: get-track
      summary: Get Track
      description: Get Spotify catalog information for a single track identified by its unique Spotify ID.
      parameters:
        - name: id
          required: true
          in: path
          schema:
            title: Spotify Track ID
            example: 11dFghVXANMlKmJXsNCbNl
            type: string
        - $ref: '#/components/parameters/QueryMarket'

      security:
        - oauth_2_0: []
  /tracks:
    get:
      tags:
        - Tracks
      operationId: get-several-tracks
      summary: |
        Get Several Tracks
      description: |
        Get Spotify catalog information for multiple tracks based on their Spotify IDs.
      parameters:
        - $ref: '#/components/parameters/QueryMarket'
        - $ref: '#/components/parameters/QueryTrackIds'
      security:
        - oauth_2_0: []

  /me/playlists:
    get:
      tags:
        - Playlists
        - Library
      operationId: get-a-list-of-current-users-playlists
      summary: Get Current User's Playlists
      description: Get a list of the playlists owned or followed by the current Spotify user.
      parameters:
        - $ref: '#/components/parameters/QueryLimit'
        - name: offset
          required: false
          in: query
          schema:
            title: Offset
            description: |
              'The index of the first playlist to return. Default:
              0 (the first object). Maximum offset: 100.000\. Use with `limit` to get the
              next set of playlists.'
            default: 0
            example: 5
            type: integer

      security:
        - oauth_2_0:
            - playlist-read-private
  /me/albums:
    get:
      tags:
        - Albums
        - Library
      operationId: get-users-saved-albums
      summary: Get User's Saved Albums
      description: Get a list of the albums saved in the current Spotify user's 'Your Music' library.
      parameters:
        - $ref: '#/components/parameters/QueryLimit'
        - $ref: '#/components/parameters/QueryOffset'
        - $ref: '#/components/parameters/QueryMarket'

      security:
        - oauth_2_0:
            - user-library-read
    put:
      tags:
        - Albums
        - Library
      operationId: save-albums-user
      summary: Save Albums for Current User
      description: Save one or more albums to the current user's 'Your Music' library.
      parameters:
        - $ref: '#/components/parameters/QueryAlbumIds'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
              properties:
                ids:
                  type: array
                  items:
                    type: string

      security:
        - oauth_2_0:
            - user-library-modify
    delete:
      tags:
        - Albums
        - Library
      operationId: remove-albums-user
      summary: Remove Users' Saved Albums
      description: Remove one or more albums from the current user's 'Your Music' library.
      parameters:
        - $ref: '#/components/parameters/QueryAlbumIds'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
              properties:
                ids:
                  type: array
                  items:
                    type: string
      security:
        - oauth_2_0:
            - user-library-modify

  /me/tracks:
    get:
      tags:
        - Tracks
        - Library
      operationId: get-users-saved-tracks
      summary: |
        Get User's Saved Tracks
      description: |
        Get a list of the songs saved in the current Spotify user's 'Your Music' library.
      parameters:
        - $ref: '#/components/parameters/QueryMarket'
        - $ref: '#/components/parameters/QueryLimit'
        - $ref: '#/components/parameters/QueryOffset'

      security:
        - oauth_2_0:
            - user-library-read
    put:
      tags:
        - Tracks
        - Library
      operationId: save-tracks-user
      summary: |
        Save Tracks for Current User
      description: |
        Save one or more tracks to the current user's 'Your Music' library.
      parameters:
        - $ref: '#/components/parameters/QueryTrackIds'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
              required:
                - uris
              properties:
                ids:
                  type: array
                  description: |
                    A JSON array of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `["4iV5W9uYEdYUVa79Axb7Rh", "1301WleyT98MSxVHPZCA6M"]`<br/>A maximum of 50 items can be specified in one request. _**Note**: if the `ids` parameter is present in the query string, any IDs listed here in the body will be ignored._
                  items:
                    type: string

  /me/top/{type}:
    get:
      tags:
        - Users
        - Tracks
        - Library
      operationId: get-users-top-artists-and-tracks
      summary: |
        Get User's Top Items
      description: |
        Get the current user's top artists or tracks based on calculated affinity.
      parameters:
        - name: type
          required: true
          in: path
          schema:
            title: Type
            description: |
              The type of entity to return. Valid values: `artists` or `tracks`
            enum: ['artists', 'tracks']
            type: string
        - name: time_range
          required: false
          in: query
          schema:
            title: Time Range
            description: |
              Over what time frame the affinities are computed. Valid values: `long_term` (calculated from several years of data and including all new data as it becomes available), `medium_term` (approximately last 6 months), `short_term` (approximately last 4 weeks). Default: `medium_term`
            default: medium_term
            example: medium_term
            type: string
        - $ref: '#/components/parameters/QueryLimit'
        - $ref: '#/components/parameters/QueryOffset'

      security:
        - oauth_2_0:
            - user-top-read
  /me/player:
    get:
      tags:
        - Player
      operationId: get-information-about-the-users-current-playback
      summary: |
        Get Playback State
      description: |
        Get information about the user’s current playback state, including track or episode, progress, and active device.
      parameters:
        - $ref: '#/components/parameters/QueryMarket'
        - $ref: '#/components/parameters/QueryAdditionalTypes'

      security:
        - oauth_2_0:
            - user-read-playback-state
    put:
      tags:
        - Player
      operationId: transfer-a-users-playback
      summary: |
        Transfer Playback
      description: |
        Transfer playback to a new device and determine if it should start playing.
      requestBody:
        content:
          application/json:
            schema:
              example:
                device_ids:
                  - 74ASZWbe4lXaubB36ztrGX
              type: object
              additionalProperties: true
              required:
                - device_ids
              properties:
                device_ids:
                  type: array
                  description: |
                    A JSON array containing the ID of the device on which playback should be started/transferred.<br/>For example:`{device_ids:["74ASZWbe4lXaubB36ztrGX"]}`<br/>_**Note**: Although an array is accepted, only a single device_id is currently supported. Supplying more than one will return `400 Bad Request`_
                  items:
                    type: string
                play:
                  type: boolean
                  description: |
                    **true**: ensure playback happens on new device.<br/>**false** or not provided: keep the current playback state.
                  additionalProperties: true
      responses:
        '204':
          description: Playback transferred

      security:
        - oauth_2_0:
            - user-modify-playback-state
  /me/player/devices:
    get:
      tags:
        - Player
      operationId: get-a-users-available-devices
      summary: |
        Get Available Devices
      description: |
        Get information about a user’s available devices.

      security:
        - oauth_2_0:
            - user-read-playback-state
  /me/player/currently-playing:
    get:
      tags:
        - Player
      operationId: get-the-users-currently-playing-track
      summary: |
        Get Currently Playing Track
      description: |
        Get the object currently being played on the user's Spotify account.
      parameters:
        - $ref: '#/components/parameters/QueryMarket'
        - $ref: '#/components/parameters/QueryAdditionalTypes'

      security:
        - oauth_2_0:
            - user-read-currently-playing

  /me/player/play:
    put:
      tags:
        - Player
      operationId: start-a-users-playback
      summary: |
        Start/Resume Playback
      description: |
        Start a new context or resume current playback on the user's active device.
      parameters:
        - name: device_id
          required: false
          in: query
          schema:
            title: Device ID
            example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
            type: string
      requestBody:
        content:
          application/json:
            schema:
              example:
                context_uri: spotify:album:5ht7ItJgpBH7W6vJ5BqpPr
                offset:
                  position: 5
                position_ms: 0
              type: object
              additionalProperties: true
              properties:
                context_uri:
                  type: string
                  additionalProperties: true
                uris:
                  type: array
                  items:
                    type: string
                offset:
                  type: object
                  additionalProperties: true
                position_ms:
                  type: integer
                  description: integer
                  additionalProperties: true
      responses:
        '204':
          description: Playback started

      security:
        - oauth_2_0:
            - user-modify-playback-state
  /me/player/pause:
    put:
      tags:
        - Player
      operationId: pause-a-users-playback
      summary: |
        Pause Playback
      description: |
        Pause playback on the user's account.
      parameters:
        - name: device_id
          required: false
          in: query
          schema:
            title: Device ID
            example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
            type: string
      responses:
        '204':
          description: Playback paused

      security:
        - oauth_2_0:
            - user-modify-playback-state
  /me/player/next:
    post:
      tags:
        - Player
      operationId: skip-users-playback-to-next-track
      summary: |
        Skip To Next
      description: |
        Skips to next track in the user’s queue.
      parameters:
        - name: device_id
          required: false
          in: query
          schema:
            title: Device ID
            example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
            type: string
      responses:
        '204':
          description: Command sent

      security:
        - oauth_2_0:
            - user-modify-playback-state
  /me/player/previous:
    post:
      tags:
        - Player
      operationId: skip-users-playback-to-previous-track
      summary: |
        Skip To Previous
      description: |
        Skips to previous track in the user’s queue.
      parameters:
        - name: device_id
          required: false
          in: query
          schema:
            title: Device ID
            example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
            type: string
      responses:
        '204':
          description: Command sent

      security:
        - oauth_2_0:
            - user-modify-playback-state
  /me/player/seek:
    put:
      tags:
        - Player
      operationId: seek-to-position-in-currently-playing-track
      summary: |
        Seek To Position
      description: |
        Seeks to the given position in the user’s currently playing track.
      parameters:
        - name: position_ms
          required: true
          in: query
          schema:
            title: Position (ms)
            example: 25000
            type: integer
        - name: device_id
          required: false
          in: query
          schema:
            title: Device ID
            example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
            type: string
      responses:
        '204':
          description: Command sent

      security:
        - oauth_2_0:
            - user-modify-playback-state
  /me/player/repeat:
    put:
      tags:
        - Player
      operationId: set-repeat-mode-on-users-playback
      summary: |
        Set Repeat Mode
      description: |
        Set the repeat mode for the user's playback. Options are repeat-track,
        repeat-context, and off.
      parameters:
        - name: state
          required: true
          in: query
          schema:
            title: State
            example: context
            type: string
        - name: device_id
          required: false
          in: query
          schema:
            title: Device ID
            example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
            type: string
      responses:
        '204':
          description: Command sent

      security:
        - oauth_2_0:
            - user-modify-playback-state
  /me/player/volume:
    put:
      tags:
        - Player
      operationId: set-volume-for-users-playback
      summary: |
        Set Playback Volume
      description: |
        Set the volume for the user’s current playback device.
      parameters:
        - name: volume_percent
          required: true
          in: query
          schema:
            title: Volume %
            description: |
              The volume to set. Must be a value from 0 to 100 inclusive.
            example: 50
            type: integer
        - name: device_id
          required: false
          in: query
          schema:
            title: Device ID
            example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
            type: string
      responses:
        '204':
          description: Command sent

      security:
        - oauth_2_0:
            - user-modify-playback-state
  /me/player/shuffle:
    put:
      tags:
        - Player
      operationId: toggle-shuffle-for-users-playback
      summary: |
        Toggle Playback Shuffle
      description: |
        Toggle shuffle on or off for user’s playback.
      parameters:
        - name: state
          required: true
          in: query
          schema:
            title: State
            example: true
            type: boolean
        - name: device_id
          required: false
          in: query
          schema:
            title: Device ID
            example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
            type: string
      responses:
        '204':
          description: Command sent

      security:
        - oauth_2_0:
            - user-modify-playback-state
  /me/player/recently-played:
    get:
      tags:
        - Player
      operationId: get-recently-played
      summary: |
        Get Recently Played Tracks
      description: |
        Get tracks from the current user's recently played tracks.
        _**Note**: Currently doesn't support podcast episodes._
      parameters:
        - name: limit
          required: false
          in: query
          schema:
            title: Limit
            default: 20
            example: 10
            type: integer
            minimum: 0
            maximum: 50
        - name: after
          required: false
          in: query
          schema:
            title: After
            example: 1484811043508
            type: integer
        - name: before
          required: false
          in: query
          schema:
            title: Before
            type: integer

      security:
        - oauth_2_0:
            - user-read-recently-played
  /me/player/queue:
    get:
      tags:
        - Player
      operationId: get-queue
      summary: |
        Get the User's Queue
      description: |
        Get the list of objects that make up the user's queue.

      security:
        - oauth_2_0:
            - user-read-playback-state
    post:
      tags:
        - Player
      operationId: add-to-queue
      summary: |
        Add Item to Playback Queue
      description: |
        Add an item to the end of the user's current playback queue.
      parameters:
        - name: uri
          required: true
          in: query
          schema:
            title: Spotify URI
            example: spotify:track:4iV5W9uYEdYUVa79Axb7Rh
            type: string
        - name: device_id
          required: false
          in: query
          schema:
            title: Device ID
            example: 0d1841b0976bae2a3a310dd74c0f3df354899bc8
            type: string
      responses:
        '204':
          description: Command received

      security:
        - oauth_2_0:
            - user-modify-playback-state

components:
  parameters:
    PathAlbumId:
      in: path
      name: id
      required: true
      schema:
        title: Spotify Album ID
        description: |
          The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the album.
        example: 4aawyAB9vmqN3uQ7FjRGTy
        type: string
    QueryMarket:
      name: market
      required: false
      in: query
      schema:
        title: Market
        description: |
          An [ISO 3166-1 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
            If a country code is specified, only content that is available in that market will be returned.<br/>
            If a valid user access token is specified in the request header, the country associated with
            the user account will take priority over this parameter.<br/>
            _**Note**: If neither market or user country are provided, the content is considered unavailable for the client._<br/>
            Users can view the country that is associated with their account in the [account settings](https://www.spotify.com/se/account/overview/).
        example: ES
        type: string
    QueryLimit:
      name: limit
      required: false
      in: query
      schema:
        title: Limit
        description: |
          The maximum number of items to return. Default: 20. Minimum: 1. Maximum: 50.
        default: 20
        example: 10
        type: integer
        minimum: 0
        maximum: 50
    QueryOffset:
      name: offset
      required: false
      in: query
      schema:
        title: Offset
        description: |
          The index of the first item to return. Default: 0 (the first item). Use with limit to get the next set of items.
        default: 0
        example: 5
        type: integer
    QueryAdditionalTypes:
      name: additional_types
      required: false
      in: query
      schema:
        title: Additional Types
        description: |
          A comma-separated list of item types that your client supports besides the default `track` type. Valid types are: `track` and `episode`.<br/>
          _**Note**: This parameter was introduced to allow existing clients to maintain their current behaviour and might be deprecated in the future._<br/>
          In addition to providing this parameter, make sure that your client properly handles cases of new types in the future by checking against the `type` field of each object.
        type: string
    QueryAlbumIds:
      name: ids
      required: true
      in: query
      schema:
        title: Spotify Album IDs
        description: |
          A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids) for the albums. Maximum: 20 IDs.
        example: 382ObEPsp2rxGrnsizN5TX,1A2GTWGtFfWp7KSQTwWOyo,2noRn2Aes5aoNVsU6iWThc
        type: string
    PathArtistId:
      name: id
      required: true
      in: path
      schema:
        title: Spotify Artist ID
        description: |
          The [Spotify ID](/documentation/web-api/concepts/spotify-uris-ids) of the artist.
        example: 0TnOYISbd1XYRBk9myaseg
        type: string
    QueryTrackIds:
      name: ids
      required: true
      in: query
      schema:
        title: Spotify Track IDs
        description: |
          A comma-separated list of the [Spotify IDs](/documentation/web-api/concepts/spotify-uris-ids). For example: `ids=4iV5W9uYEdYUVa79Axb7Rh,1301WleyT98MSxVHPZCA6M`. Maximum: 50 IDs.
        example: 7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B
        type: string
    QueryIncludeGroups:
      name: include_groups
      required: false
      in: query
      schema:
        title: Groups to include (single, album, appears_on, compilation)
        description: |
          A comma-separated list of keywords that will be used to filter the response. If not supplied, all album types will be returned. <br/>
          Valid values are:<br/>- `album`<br/>- `single`<br/>- `appears_on`<br/>- `compilation`<br/>For example: `include_groups=album,single`.
        example: single,appears_on
        type: string
